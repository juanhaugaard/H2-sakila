/*
 * This file is generated by jOOQ.
 */
package com.tayrona.sakila.data.generated;


import com.tayrona.sakila.data.generated.tables.Actor;
import com.tayrona.sakila.data.generated.tables.Address;
import com.tayrona.sakila.data.generated.tables.Category;
import com.tayrona.sakila.data.generated.tables.City;
import com.tayrona.sakila.data.generated.tables.Country;
import com.tayrona.sakila.data.generated.tables.Customer;
import com.tayrona.sakila.data.generated.tables.Film;
import com.tayrona.sakila.data.generated.tables.FilmActor;
import com.tayrona.sakila.data.generated.tables.FilmCategory;
import com.tayrona.sakila.data.generated.tables.FilmText;
import com.tayrona.sakila.data.generated.tables.Inventory;
import com.tayrona.sakila.data.generated.tables.Language;
import com.tayrona.sakila.data.generated.tables.Payment;
import com.tayrona.sakila.data.generated.tables.Rental;
import com.tayrona.sakila.data.generated.tables.Staff;
import com.tayrona.sakila.data.generated.tables.Store;
import com.tayrona.sakila.data.generated.tables.TestTable;
import com.tayrona.sakila.data.generated.tables.records.ActorRecord;
import com.tayrona.sakila.data.generated.tables.records.AddressRecord;
import com.tayrona.sakila.data.generated.tables.records.CategoryRecord;
import com.tayrona.sakila.data.generated.tables.records.CityRecord;
import com.tayrona.sakila.data.generated.tables.records.CountryRecord;
import com.tayrona.sakila.data.generated.tables.records.CustomerRecord;
import com.tayrona.sakila.data.generated.tables.records.FilmActorRecord;
import com.tayrona.sakila.data.generated.tables.records.FilmCategoryRecord;
import com.tayrona.sakila.data.generated.tables.records.FilmRecord;
import com.tayrona.sakila.data.generated.tables.records.FilmTextRecord;
import com.tayrona.sakila.data.generated.tables.records.InventoryRecord;
import com.tayrona.sakila.data.generated.tables.records.LanguageRecord;
import com.tayrona.sakila.data.generated.tables.records.PaymentRecord;
import com.tayrona.sakila.data.generated.tables.records.RentalRecord;
import com.tayrona.sakila.data.generated.tables.records.StaffRecord;
import com.tayrona.sakila.data.generated.tables.records.StoreRecord;
import com.tayrona.sakila.data.generated.tables.records.TestTableRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * SAKILA.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<ActorRecord> PK_ACTOR = Internal.createUniqueKey(Actor.ACTOR, DSL.name("PK_ACTOR"), new TableField[] { Actor.ACTOR.ACTOR_ID }, true);
    public static final UniqueKey<AddressRecord> PK_ADDRESS = Internal.createUniqueKey(Address.ADDRESS, DSL.name("PK_ADDRESS"), new TableField[] { Address.ADDRESS.ADDRESS_ID }, true);
    public static final UniqueKey<CategoryRecord> PK_CATEGORY = Internal.createUniqueKey(Category.CATEGORY, DSL.name("PK_CATEGORY"), new TableField[] { Category.CATEGORY.CATEGORY_ID }, true);
    public static final UniqueKey<CityRecord> PK_CITY = Internal.createUniqueKey(City.CITY, DSL.name("PK_CITY"), new TableField[] { City.CITY.CITY_ID }, true);
    public static final UniqueKey<CountryRecord> PK_COUNTRY = Internal.createUniqueKey(Country.COUNTRY, DSL.name("PK_COUNTRY"), new TableField[] { Country.COUNTRY.COUNTRY_ID }, true);
    public static final UniqueKey<CustomerRecord> PK_CUSTOMER = Internal.createUniqueKey(Customer.CUSTOMER, DSL.name("PK_CUSTOMER"), new TableField[] { Customer.CUSTOMER.CUSTOMER_ID }, true);
    public static final UniqueKey<FilmRecord> PK_FILM = Internal.createUniqueKey(Film.FILM, DSL.name("PK_FILM"), new TableField[] { Film.FILM.FILM_ID }, true);
    public static final UniqueKey<FilmActorRecord> PK_FILM_ACTOR = Internal.createUniqueKey(FilmActor.FILM_ACTOR, DSL.name("PK_FILM_ACTOR"), new TableField[] { FilmActor.FILM_ACTOR.ACTOR_ID, FilmActor.FILM_ACTOR.FILM_ID }, true);
    public static final UniqueKey<FilmCategoryRecord> PK_FILM_CATEGORY = Internal.createUniqueKey(FilmCategory.FILM_CATEGORY, DSL.name("PK_FILM_CATEGORY"), new TableField[] { FilmCategory.FILM_CATEGORY.FILM_ID, FilmCategory.FILM_CATEGORY.CATEGORY_ID }, true);
    public static final UniqueKey<FilmTextRecord> PK_FILM_TEXT = Internal.createUniqueKey(FilmText.FILM_TEXT, DSL.name("PK_FILM_TEXT"), new TableField[] { FilmText.FILM_TEXT.FILM_ID }, true);
    public static final UniqueKey<InventoryRecord> PK_INVENTORY = Internal.createUniqueKey(Inventory.INVENTORY, DSL.name("PK_INVENTORY"), new TableField[] { Inventory.INVENTORY.INVENTORY_ID }, true);
    public static final UniqueKey<LanguageRecord> PK_LANGUAGE = Internal.createUniqueKey(Language.LANGUAGE, DSL.name("PK_LANGUAGE"), new TableField[] { Language.LANGUAGE.LANGUAGE_ID }, true);
    public static final UniqueKey<PaymentRecord> PK_PAYMENT = Internal.createUniqueKey(Payment.PAYMENT, DSL.name("PK_PAYMENT"), new TableField[] { Payment.PAYMENT.PAYMENT_ID }, true);
    public static final UniqueKey<RentalRecord> PK_RENTAL = Internal.createUniqueKey(Rental.RENTAL, DSL.name("PK_RENTAL"), new TableField[] { Rental.RENTAL.RENTAL_ID }, true);
    public static final UniqueKey<StaffRecord> PK_STAFF = Internal.createUniqueKey(Staff.STAFF, DSL.name("PK_STAFF"), new TableField[] { Staff.STAFF.STAFF_ID }, true);
    public static final UniqueKey<StoreRecord> IDX_UNIQUE_MANAGER = Internal.createUniqueKey(Store.STORE, DSL.name("IDX_UNIQUE_MANAGER"), new TableField[] { Store.STORE.MANAGER_STAFF_ID }, true);
    public static final UniqueKey<StoreRecord> PK_STORE = Internal.createUniqueKey(Store.STORE, DSL.name("PK_STORE"), new TableField[] { Store.STORE.STORE_ID }, true);
    public static final UniqueKey<TestTableRecord> PK_TESTTABLE = Internal.createUniqueKey(TestTable.TEST_TABLE, DSL.name("PK_TESTTABLE"), new TableField[] { TestTable.TEST_TABLE.ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<AddressRecord, CityRecord> FK_ADDRESS_CITY = Internal.createForeignKey(Address.ADDRESS, DSL.name("FK_ADDRESS_CITY"), new TableField[] { Address.ADDRESS.CITY_ID }, Keys.PK_CITY, new TableField[] { City.CITY.CITY_ID }, true);
    public static final ForeignKey<CityRecord, CountryRecord> FK_CITY_COUNTRY = Internal.createForeignKey(City.CITY, DSL.name("FK_CITY_COUNTRY"), new TableField[] { City.CITY.COUNTRY_ID }, Keys.PK_COUNTRY, new TableField[] { Country.COUNTRY.COUNTRY_ID }, true);
    public static final ForeignKey<CustomerRecord, AddressRecord> FK_CUSTOMER_ADDRESS = Internal.createForeignKey(Customer.CUSTOMER, DSL.name("FK_CUSTOMER_ADDRESS"), new TableField[] { Customer.CUSTOMER.ADDRESS_ID }, Keys.PK_ADDRESS, new TableField[] { Address.ADDRESS.ADDRESS_ID }, true);
    public static final ForeignKey<CustomerRecord, StoreRecord> FK_CUSTOMER_STORE = Internal.createForeignKey(Customer.CUSTOMER, DSL.name("FK_CUSTOMER_STORE"), new TableField[] { Customer.CUSTOMER.STORE_ID }, Keys.PK_STORE, new TableField[] { Store.STORE.STORE_ID }, true);
    public static final ForeignKey<FilmRecord, LanguageRecord> FK_FILM_LANGUAGE = Internal.createForeignKey(Film.FILM, DSL.name("FK_FILM_LANGUAGE"), new TableField[] { Film.FILM.LANGUAGE_ID }, Keys.PK_LANGUAGE, new TableField[] { Language.LANGUAGE.LANGUAGE_ID }, true);
    public static final ForeignKey<FilmRecord, LanguageRecord> FK_FILM_LANGUAGE_ORIGINAL = Internal.createForeignKey(Film.FILM, DSL.name("FK_FILM_LANGUAGE_ORIGINAL"), new TableField[] { Film.FILM.ORIGINAL_LANGUAGE_ID }, Keys.PK_LANGUAGE, new TableField[] { Language.LANGUAGE.LANGUAGE_ID }, true);
    public static final ForeignKey<FilmActorRecord, ActorRecord> FK_FILM_ACTOR_ACTOR = Internal.createForeignKey(FilmActor.FILM_ACTOR, DSL.name("FK_FILM_ACTOR_ACTOR"), new TableField[] { FilmActor.FILM_ACTOR.ACTOR_ID }, Keys.PK_ACTOR, new TableField[] { Actor.ACTOR.ACTOR_ID }, true);
    public static final ForeignKey<FilmActorRecord, FilmRecord> FK_FILM_ACTOR_FILM = Internal.createForeignKey(FilmActor.FILM_ACTOR, DSL.name("FK_FILM_ACTOR_FILM"), new TableField[] { FilmActor.FILM_ACTOR.FILM_ID }, Keys.PK_FILM, new TableField[] { Film.FILM.FILM_ID }, true);
    public static final ForeignKey<FilmCategoryRecord, CategoryRecord> FK_FILM_CATEGORY_CATEGORY = Internal.createForeignKey(FilmCategory.FILM_CATEGORY, DSL.name("FK_FILM_CATEGORY_CATEGORY"), new TableField[] { FilmCategory.FILM_CATEGORY.CATEGORY_ID }, Keys.PK_CATEGORY, new TableField[] { Category.CATEGORY.CATEGORY_ID }, true);
    public static final ForeignKey<FilmCategoryRecord, FilmRecord> FK_FILM_CATEGORY_FILM = Internal.createForeignKey(FilmCategory.FILM_CATEGORY, DSL.name("FK_FILM_CATEGORY_FILM"), new TableField[] { FilmCategory.FILM_CATEGORY.FILM_ID }, Keys.PK_FILM, new TableField[] { Film.FILM.FILM_ID }, true);
    public static final ForeignKey<InventoryRecord, FilmRecord> FK_INVENTORY_FILM = Internal.createForeignKey(Inventory.INVENTORY, DSL.name("FK_INVENTORY_FILM"), new TableField[] { Inventory.INVENTORY.FILM_ID }, Keys.PK_FILM, new TableField[] { Film.FILM.FILM_ID }, true);
    public static final ForeignKey<InventoryRecord, StoreRecord> FK_INVENTORY_STORE = Internal.createForeignKey(Inventory.INVENTORY, DSL.name("FK_INVENTORY_STORE"), new TableField[] { Inventory.INVENTORY.STORE_ID }, Keys.PK_STORE, new TableField[] { Store.STORE.STORE_ID }, true);
    public static final ForeignKey<PaymentRecord, CustomerRecord> FK_PAYMENT_CUSTOMER = Internal.createForeignKey(Payment.PAYMENT, DSL.name("FK_PAYMENT_CUSTOMER"), new TableField[] { Payment.PAYMENT.CUSTOMER_ID }, Keys.PK_CUSTOMER, new TableField[] { Customer.CUSTOMER.CUSTOMER_ID }, true);
    public static final ForeignKey<PaymentRecord, RentalRecord> FK_PAYMENT_RENTAL = Internal.createForeignKey(Payment.PAYMENT, DSL.name("FK_PAYMENT_RENTAL"), new TableField[] { Payment.PAYMENT.RENTAL_ID }, Keys.PK_RENTAL, new TableField[] { Rental.RENTAL.RENTAL_ID }, true);
    public static final ForeignKey<PaymentRecord, StaffRecord> FK_PAYMENT_STAFF = Internal.createForeignKey(Payment.PAYMENT, DSL.name("FK_PAYMENT_STAFF"), new TableField[] { Payment.PAYMENT.STAFF_ID }, Keys.PK_STAFF, new TableField[] { Staff.STAFF.STAFF_ID }, true);
    public static final ForeignKey<RentalRecord, CustomerRecord> FK_RENTAL_CUSTOMER = Internal.createForeignKey(Rental.RENTAL, DSL.name("FK_RENTAL_CUSTOMER"), new TableField[] { Rental.RENTAL.CUSTOMER_ID }, Keys.PK_CUSTOMER, new TableField[] { Customer.CUSTOMER.CUSTOMER_ID }, true);
    public static final ForeignKey<RentalRecord, InventoryRecord> FK_RENTAL_INVENTORY = Internal.createForeignKey(Rental.RENTAL, DSL.name("FK_RENTAL_INVENTORY"), new TableField[] { Rental.RENTAL.INVENTORY_ID }, Keys.PK_INVENTORY, new TableField[] { Inventory.INVENTORY.INVENTORY_ID }, true);
    public static final ForeignKey<RentalRecord, StaffRecord> FK_RENTAL_STAFF = Internal.createForeignKey(Rental.RENTAL, DSL.name("FK_RENTAL_STAFF"), new TableField[] { Rental.RENTAL.STAFF_ID }, Keys.PK_STAFF, new TableField[] { Staff.STAFF.STAFF_ID }, true);
    public static final ForeignKey<StaffRecord, AddressRecord> FK_STAFF_ADDRESS = Internal.createForeignKey(Staff.STAFF, DSL.name("FK_STAFF_ADDRESS"), new TableField[] { Staff.STAFF.ADDRESS_ID }, Keys.PK_ADDRESS, new TableField[] { Address.ADDRESS.ADDRESS_ID }, true);
    public static final ForeignKey<StaffRecord, StoreRecord> FK_STAFF_STORE = Internal.createForeignKey(Staff.STAFF, DSL.name("FK_STAFF_STORE"), new TableField[] { Staff.STAFF.STORE_ID }, Keys.PK_STORE, new TableField[] { Store.STORE.STORE_ID }, true);
    public static final ForeignKey<StoreRecord, AddressRecord> FK_STORE_ADDRESS = Internal.createForeignKey(Store.STORE, DSL.name("FK_STORE_ADDRESS"), new TableField[] { Store.STORE.ADDRESS_ID }, Keys.PK_ADDRESS, new TableField[] { Address.ADDRESS.ADDRESS_ID }, true);
    public static final ForeignKey<StoreRecord, StaffRecord> FK_STORE_STAFF = Internal.createForeignKey(Store.STORE, DSL.name("FK_STORE_STAFF"), new TableField[] { Store.STORE.MANAGER_STAFF_ID }, Keys.PK_STAFF, new TableField[] { Staff.STAFF.STAFF_ID }, true);
}
