/*
 * This file is generated by jOOQ.
 */
package com.tayrona.sakila.data.generated.tables.records;


import com.tayrona.sakila.data.generated.tables.TestTable;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * test table
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TestTableRecord extends UpdatableRecordImpl<TestTableRecord> implements Record2<Long, String[]> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>PUBLIC.TEST_TABLE.ID</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>PUBLIC.TEST_TABLE.ID</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>PUBLIC.TEST_TABLE.FEATURES</code>. Special features
     * array (Trailers, Commentaries, Deleted Scenes, Behind the Scenes)
     */
    public void setFeatures(String[] value) {
        set(1, value);
    }

    /**
     * Getter for <code>PUBLIC.TEST_TABLE.FEATURES</code>. Special features
     * array (Trailers, Commentaries, Deleted Scenes, Behind the Scenes)
     */
    public String[] getFeatures() {
        return (String[]) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, String[]> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<Long, String[]> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return TestTable.TEST_TABLE.ID;
    }

    @Override
    public Field<String[]> field2() {
        return TestTable.TEST_TABLE.FEATURES;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public String[] component2() {
        return getFeatures();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public String[] value2() {
        return getFeatures();
    }

    @Override
    public TestTableRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public TestTableRecord value2(String[] value) {
        setFeatures(value);
        return this;
    }

    @Override
    public TestTableRecord values(Long value1, String[] value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TestTableRecord
     */
    public TestTableRecord() {
        super(TestTable.TEST_TABLE);
    }

    /**
     * Create a detached, initialised TestTableRecord
     */
    public TestTableRecord(Long id, String[] features) {
        super(TestTable.TEST_TABLE);

        setId(id);
        setFeatures(features);
    }
}
