/*
 * This file is generated by jOOQ.
 */
package org.tayrona.sakila.data.tables;


import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function14;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row14;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.tayrona.sakila.data.Indexes;
import org.tayrona.sakila.data.Keys;
import org.tayrona.sakila.data.Public;
import org.tayrona.sakila.data.enums.MpaaRating;
import org.tayrona.sakila.data.tables.records.FilmRecord;


/**
 * Film details table
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Film extends TableImpl<FilmRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>PUBLIC.FILM</code>
     */
    public static final Film FILM = new Film();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FilmRecord> getRecordType() {
        return FilmRecord.class;
    }

    /**
     * The column <code>PUBLIC.FILM.FILM_ID</code>.
     */
    public final TableField<FilmRecord, Long> FILM_ID = createField(DSL.name("FILM_ID"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>PUBLIC.FILM.TITLE</code>.
     */
    public final TableField<FilmRecord, String> TITLE = createField(DSL.name("TITLE"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.FILM.DESCRIPTION</code>.
     */
    public final TableField<FilmRecord, String> DESCRIPTION = createField(DSL.name("DESCRIPTION"), SQLDataType.VARCHAR(1000000000).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>PUBLIC.FILM.RELEASE_YEAR</code>. YearValue a small int
     * between 1900 and 2155
     */
    public final TableField<FilmRecord, Short> RELEASE_YEAR = createField(DSL.name("RELEASE_YEAR"), org.tayrona.sakila.data.Domains.YEARVALUE.getDataType(), this, "YearValue a small int between 1900 and 2155");

    /**
     * The column <code>PUBLIC.FILM.LANGUAGE_ID</code>.
     */
    public final TableField<FilmRecord, Long> LANGUAGE_ID = createField(DSL.name("LANGUAGE_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.FILM.ORIGINAL_LANGUAGE_ID</code>.
     */
    public final TableField<FilmRecord, Long> ORIGINAL_LANGUAGE_ID = createField(DSL.name("ORIGINAL_LANGUAGE_ID"), SQLDataType.BIGINT.defaultValue(DSL.field("NULL", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>PUBLIC.FILM.RENTAL_DURATION</code>.
     */
    public final TableField<FilmRecord, Byte> RENTAL_DURATION = createField(DSL.name("RENTAL_DURATION"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.field("3", SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>PUBLIC.FILM.RENTAL_RATE</code>.
     */
    public final TableField<FilmRecord, BigDecimal> RENTAL_RATE = createField(DSL.name("RENTAL_RATE"), SQLDataType.DECIMAL(4, 2).nullable(false).defaultValue(DSL.field("4.99", SQLDataType.DECIMAL)), this, "");

    /**
     * The column <code>PUBLIC.FILM.LENGTH</code>.
     */
    public final TableField<FilmRecord, Short> LENGTH = createField(DSL.name("LENGTH"), SQLDataType.SMALLINT.defaultValue(DSL.field("NULL", SQLDataType.SMALLINT)), this, "");

    /**
     * The column <code>PUBLIC.FILM.REPLACEMENT_COST</code>.
     */
    public final TableField<FilmRecord, BigDecimal> REPLACEMENT_COST = createField(DSL.name("REPLACEMENT_COST"), SQLDataType.DECIMAL(5, 2).nullable(false).defaultValue(DSL.field("19.99", SQLDataType.DECIMAL)), this, "");

    /**
     * The column <code>PUBLIC.FILM.BARCODE</code>. UPC is barcode of length 12
     * characters
     */
    public final TableField<FilmRecord, String> BARCODE = createField(DSL.name("BARCODE"), org.tayrona.sakila.data.Domains.UPC.getDataType(), this, "UPC is barcode of length 12 characters");

    /**
     * The column <code>PUBLIC.FILM.REVERSE_BARCODE</code>. UPC is barcode of
     * length 12 characters
     */
    public final TableField<FilmRecord, String> REVERSE_BARCODE = createField(DSL.name("REVERSE_BARCODE"), org.tayrona.sakila.data.Domains.UPC.getDataType(), this, "UPC is barcode of length 12 characters");

    /**
     * The column <code>PUBLIC.FILM.RATING</code>. MPAA Rating ENUM
     * (G,PG,PG-13,R,NC-17)
     */
    public final TableField<FilmRecord, MpaaRating> RATING = createField(DSL.name("RATING"), SQLDataType.VARCHAR.defaultValue(DSL.field("'G'", SQLDataType.VARCHAR)).asEnumDataType(org.tayrona.sakila.data.enums.MpaaRating.class), this, "MPAA Rating ENUM (G,PG,PG-13,R,NC-17)");

    /**
     * The column <code>PUBLIC.FILM.LAST_UPDATE</code>.
     */
    public final TableField<FilmRecord, OffsetDateTime> LAST_UPDATE = createField(DSL.name("LAST_UPDATE"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    private Film(Name alias, Table<FilmRecord> aliased) {
        this(alias, aliased, null);
    }

    private Film(Name alias, Table<FilmRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Film details table"), TableOptions.table());
    }

    /**
     * Create an aliased <code>PUBLIC.FILM</code> table reference
     */
    public Film(String alias) {
        this(DSL.name(alias), FILM);
    }

    /**
     * Create an aliased <code>PUBLIC.FILM</code> table reference
     */
    public Film(Name alias) {
        this(alias, FILM);
    }

    /**
     * Create a <code>PUBLIC.FILM</code> table reference
     */
    public Film() {
        this(DSL.name("FILM"), null);
    }

    public <O extends Record> Film(Table<O> child, ForeignKey<O, FilmRecord> key) {
        super(child, key, FILM);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_BARCODE, Indexes.IDX_REVERSE_BARCODE, Indexes.IDX_TITLE);
    }

    @Override
    public Identity<FilmRecord, Long> getIdentity() {
        return (Identity<FilmRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<FilmRecord> getPrimaryKey() {
        return Keys.PK_FILM;
    }

    @Override
    public List<ForeignKey<FilmRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_FILM_LANGUAGE, Keys.FK_FILM_LANGUAGE_ORIGINAL);
    }

    private transient Language _fkFilmLanguage;
    private transient Language _fkFilmLanguageOriginal;

    /**
     * Get the implicit join path to the <code>PUBLIC.LANGUAGE</code> table, via
     * the <code>FK_FILM_LANGUAGE</code> key.
     */
    public Language fkFilmLanguage() {
        if (_fkFilmLanguage == null)
            _fkFilmLanguage = new Language(this, Keys.FK_FILM_LANGUAGE);

        return _fkFilmLanguage;
    }

    /**
     * Get the implicit join path to the <code>PUBLIC.LANGUAGE</code> table, via
     * the <code>FK_FILM_LANGUAGE_ORIGINAL</code> key.
     */
    public Language fkFilmLanguageOriginal() {
        if (_fkFilmLanguageOriginal == null)
            _fkFilmLanguageOriginal = new Language(this, Keys.FK_FILM_LANGUAGE_ORIGINAL);

        return _fkFilmLanguageOriginal;
    }

    @Override
    public Film as(String alias) {
        return new Film(DSL.name(alias), this);
    }

    @Override
    public Film as(Name alias) {
        return new Film(alias, this);
    }

    @Override
    public Film as(Table<?> alias) {
        return new Film(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Film rename(String name) {
        return new Film(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Film rename(Name name) {
        return new Film(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Film rename(Table<?> name) {
        return new Film(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row14 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row14<Long, String, String, Short, Long, Long, Byte, BigDecimal, Short, BigDecimal, String, String, MpaaRating, OffsetDateTime> fieldsRow() {
        return (Row14) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function14<? super Long, ? super String, ? super String, ? super Short, ? super Long, ? super Long, ? super Byte, ? super BigDecimal, ? super Short, ? super BigDecimal, ? super String, ? super String, ? super MpaaRating, ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function14<? super Long, ? super String, ? super String, ? super Short, ? super Long, ? super Long, ? super Byte, ? super BigDecimal, ? super Short, ? super BigDecimal, ? super String, ? super String, ? super MpaaRating, ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
