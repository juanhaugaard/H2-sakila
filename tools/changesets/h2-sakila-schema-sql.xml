<?xml version="1.1" encoding="UTF-8" standalone="no"?>
<databaseChangeLog
        xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
    http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-4.0.xsd">

    <changeSet id="1" author="Juan Haugaard">
        <comment>Create domain yearValue</comment>
        <sql>
            CREATE DOMAIN YEARVALUE AS SMALLINT
            COMMENT 'YearValue a small int between 1900 and 2155'
            CHECK ((VALUE &gt;= 1900) AND (VALUE &lt;= 2155));
        </sql>
        <rollback>
            <sql>
                DROP DOMAIN YEARVALUE;
            </sql>
        </rollback>
    </changeSet>
    <changeSet id="2" author="Juan Haugaard">
        <comment>Create domain mpaa_rating</comment>
        <sql>
            CREATE DOMAIN MPAA_RATING AS ENUM ('G','PG','PG-13','R','NC-17')
            COMMENT 'MPAA Rating ENUM (G,PG,PG-13,R,NC-17)';
        </sql>
        <rollback>
            <sql>
                DROP DOMAIN MPAA_RATING;
            </sql>
        </rollback>
    </changeSet>
    <changeSet id="3" author="Juan Haugaard">
        <comment>Create domain Special Features ENUM</comment>
        <sql>
            CREATE DOMAIN SPECIAL_FEATURES_ENUM AS ENUM ('Trailers','Commentaries','Deleted Scenes','Behind the Scenes')
            COMMENT 'Special Features ENUM (Trailers, Commentaries, Deleted Scenes, Behind the Scenes)';
        </sql>
        <rollback>
            <sql>
                DROP DOMAIN SPECIAL_FEATURES_ENUM;
            </sql>
        </rollback>
    </changeSet>
    <changeSet id="4" author="Juan Haugaard">
        <comment>Create domain special_features</comment>
        <sql>
            CREATE DOMAIN SPECIAL_FEATURES AS VARCHAR(200) ARRAY[4]
            COMMENT 'Special features array (Trailers, Commentaries, Deleted Scenes, Behind the Scenes)'
            CHECK(EXISTS(VALUES ('Trailers', 'Commentaries', 'Deleted Scenes', 'Behind the Scenes')));
        </sql>
        <rollback>
            <sql>
                DROP DOMAIN SPECIAL_FEATURES;
            </sql>
        </rollback>
    </changeSet>
    <changeSet id="5" author="Juan Haugaard">
        <comment>Create text concatenation function</comment>
        <sql>
            CREATE ALIAS _group_concat DETERMINISTIC AS
            'String group_concat(String text1, String text2) {
            if (null == text1) return text2;
            if (null == text2) return text1;
            return text1 + "," + text2;}';
        </sql>
        <rollback>
            <sql>
                DROP ALIAS _group_concat;
            </sql>
        </rollback>
    </changeSet>
    <changeSet id="6" author="Juan Haugaard">
        <comment>Create text reverse function</comment>
        <sql>
<!--            CREATE ALIAS REVERSE DETERMINISTIC FOR 'com.tayrona.sakila.procedures.StringUtils.reverse';-->
            CREATE ALIAS REVERSE DETERMINISTIC AS
            'String reverse(String value) {
            if (null != value) return (new StringBuilder(value)).reverse().toString();
            else return null}';
        </sql>
        <rollback>
            <sql>
                DROP ALIAS REVERSE;
            </sql>
        </rollback>
    </changeSet>
    <changeSet id="7" author="Juan Haugaard">
        <comment>Create table Category</comment>
        <sql>
            CREATE TABLE CATEGORY (
                category_id BIGINT GENERATED ALWAYS AS IDENTITY(INCREMENT BY 1 NO MAXVALUE NO MINVALUE CACHE 1) NOT NULL,
                name VARCHAR(25) NOT NULL,
                last_update TIMESTAMP WITH TIME ZONE DEFAULT current_timestamp() NOT NULL,
                CONSTRAINT PK_CATEGORY PRIMARY KEY (category_id)
            );
            COMMENT ON TABLE CATEGORY IS 'Category details table';
        </sql>
        <rollback>
            <sql>
                DROP TABLE CATEGORY;
            </sql>
        </rollback>
    </changeSet>
    <changeSet id="8" author="Juan Haugaard">
        <comment>Create table Country</comment>
        <sql>
            CREATE TABLE COUNTRY (
            country_id BIGINT GENERATED ALWAYS AS IDENTITY(INCREMENT BY 1 NO MAXVALUE NO MINVALUE CACHE 1) NOT NULL,
            country VARCHAR(50) NOT NULL,
            last_update TIMESTAMP WITH TIME ZONE DEFAULT current_timestamp() ON UPDATE current_timestamp() NOT NULL,
            CONSTRAINT PK_COUNTRY PRIMARY KEY (country_id)
            );
            COMMENT ON TABLE COUNTRY IS 'Country details table';
        </sql>
        <rollback>
            <sql>
                DROP TABLE COUNTRY;
            </sql>
        </rollback>
    </changeSet>
    <changeSet id="9" author="Juan Haugaard">
        <comment>Create table City</comment>
        <sql>
            CREATE TABLE CITY (
                city_id BIGINT GENERATED ALWAYS AS IDENTITY(INCREMENT BY 1 NO MAXVALUE NO MINVALUE CACHE 1) NOT NULL,
                city VARCHAR(50) NOT NULL,
                country_id BIGINT NOT NULL,
                last_update TIMESTAMP WITH TIME ZONE DEFAULT current_timestamp() ON UPDATE current_timestamp() NOT NULL,
                CONSTRAINT PK_CITY PRIMARY KEY (city_id),
                CONSTRAINT FK_CITY_COUNTRY FOREIGN KEY (country_id)
                    REFERENCES COUNTRY (country_id) ON DELETE    RESTRICT ON UPDATE CASCADE
            );
            COMMENT ON TABLE CITY IS 'City details table';
        </sql>
        <rollback>
            <sql>
                DROP TABLE CITY;
            </sql>
        </rollback>
    </changeSet>
    <changeSet id="10" author="Juan Haugaard">
        <comment>Create table Address</comment>
        <sql>
            CREATE TABLE ADDRESS (
                address_id BIGINT GENERATED ALWAYS AS IDENTITY(INCREMENT BY 1 NO MAXVALUE NO MINVALUE CACHE 1) NOT NULL,
                address VARCHAR(50) NOT NULL,
                address2 VARCHAR(50) DEFAULT NULL,
                district VARCHAR(20) NOT NULL,
                city_id BIGINT NOT NULL,
                postal_code VARCHAR(10) DEFAULT NULL,
                phone VARCHAR(20) NOT NULL,
                last_update TIMESTAMP WITH TIME ZONE DEFAULT current_timestamp() ON UPDATE current_timestamp() NOT NULL,
                CONSTRAINT PK_ADDRESS PRIMARY KEY (address_id),
                CONSTRAINT FK_ADDRESS_CITY FOREIGN KEY (city_id)
                    REFERENCES CITY (city_id) ON DELETE RESTRICT ON UPDATE CASCADE
            );
            COMMENT ON TABLE ADDRESS IS 'Address details table';
        </sql>
        <rollback>
            <sql>
                DROP TABLE ADDRESS;
            </sql>
        </rollback>
    </changeSet>
    <changeSet id="11" author="Juan Haugaard">
        <comment>Create table Language</comment>
        <sql>
            CREATE TABLE LANGUAGE (
                language_id BIGINT GENERATED ALWAYS AS IDENTITY(INCREMENT BY 1 NO MAXVALUE NO MINVALUE CACHE 1) NOT NULL,
                name VARCHAR(20) NOT NULL,
                last_update TIMESTAMP WITH TIME ZONE DEFAULT current_timestamp() ON UPDATE current_timestamp() NOT NULL,
                CONSTRAINT PK_LANGUAGE PRIMARY KEY (language_id)
            );
            COMMENT ON TABLE LANGUAGE IS 'Language details table';
        </sql>
        <rollback>
            <sql>
                DROP TABLE LANGUAGE;
            </sql>
        </rollback>
    </changeSet>
    <changeSet id="12" author="Juan Haugaard">
        <comment>Create table ACTOR</comment>
        <sql>
            CREATE TABLE ACTOR (
                actor_id BIGINT GENERATED ALWAYS AS IDENTITY(INCREMENT BY 1 NO MAXVALUE NO MINVALUE CACHE 1) NOT NULL,
                first_name VARCHAR(45) NOT NULL,
                last_name VARCHAR(45) NOT NULL,
                last_update TIMESTAMP WITH TIME ZONE DEFAULT current_timestamp() ON UPDATE current_timestamp() NOT NULL,
                CONSTRAINT PK_ACTOR PRIMARY KEY (actor_id)
            );
            COMMENT ON TABLE ACTOR IS 'Actor details table';
        </sql>
        <rollback>
            <sql>
                DROP TABLE ACTOR;
            </sql>
        </rollback>
    </changeSet>
    <changeSet id="13" author="Juan Haugaard">
        <comment>Create table Store</comment>
        <sql>
            CREATE TABLE STORE (
                store_id BIGINT GENERATED ALWAYS AS IDENTITY(INCREMENT BY 1 NO MAXVALUE NO MINVALUE CACHE 1) NOT NULL,
                manager_staff_id BIGINT NOT NULL,
                address_id BIGINT NOT NULL,
                last_update TIMESTAMP WITH TIME ZONE DEFAULT current_timestamp() ON UPDATE current_timestamp() NOT NULL,
                CONSTRAINT PK_STORE PRIMARY KEY (store_id),
                CONSTRAINT idx_unique_manager UNIQUE (manager_staff_id),
                CONSTRAINT fk_store_address FOREIGN KEY (address_id)
                    REFERENCES ADDRESS (address_id) ON DELETE RESTRICT ON UPDATE CASCADE
            );
            COMMENT ON TABLE STORE IS 'Store details table';
        </sql>
        <rollback>
            <sql>
                DROP TABLE STORE;
            </sql>
        </rollback>
    </changeSet>
    <changeSet id="14" author="Juan Haugaard">
        <comment>Create table Staff</comment>
        <sql>
            CREATE TABLE STAFF (
                staff_id BIGINT GENERATED ALWAYS AS IDENTITY(INCREMENT BY 1 NO MAXVALUE NO MINVALUE CACHE 1) NOT NULL,
                first_name VARCHAR(45) NOT NULL,
                last_name VARCHAR(45) NOT NULL,
                address_id BIGINT NOT NULL,
                picture BLOB DEFAULT NULL,
                email VARCHAR(50) DEFAULT NULL,
                store_id BIGINT NOT NULL,
                active BOOLEAN NOT NULL DEFAULT TRUE,
                username VARCHAR(16) NOT NULL,
                password BINARY(40) DEFAULT NULL,
                last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                CONSTRAINT PK_STAFF PRIMARY KEY (staff_id),
                CONSTRAINT fk_staff_store FOREIGN KEY (store_id)
                    REFERENCES STORE (store_id) ON DELETE RESTRICT ON UPDATE CASCADE,
                CONSTRAINT fk_staff_address FOREIGN KEY (address_id)
                    REFERENCES ADDRESS (address_id) ON DELETE RESTRICT ON UPDATE CASCADE
            );
            COMMENT ON TABLE STAFF IS 'Staff details table';
        </sql>
        <rollback>
            <sql>
                DROP TABLE STAFF;
            </sql>
        </rollback>
    </changeSet>
    <changeSet id="15" author="Juan Haugaard">
        <comment>Alter table Store to add Foreign key to staff table</comment>
        <sql>
            ALTER TABLE STORE
            ADD CONSTRAINT fk_store_staff FOREIGN KEY (manager_staff_id)
                REFERENCES STAFF (staff_id) ON DELETE RESTRICT ON UPDATE CASCADE;
        </sql>
        <rollback>
            <sql>
                ALTER TABLE STORE
                DROP CONSTRAINT fk_store_staff;
            </sql>
        </rollback>
    </changeSet>
    <changeSet id="16" author="Juan Haugaard">
        <comment>Create table Customer</comment>
        <sql>
            CREATE TABLE CUSTOMER (
                customer_id BIGINT GENERATED ALWAYS AS IDENTITY(INCREMENT BY 1 NO MAXVALUE NO MINVALUE CACHE 1) NOT NULL,
                store_id BIGINT NOT NULL,
                first_name VARCHAR(45) NOT NULL,
                last_name VARCHAR(45) NOT NULL,
                email VARCHAR(50) DEFAULT NULL,
                address_id BIGINT NOT NULL,
                active BOOLEAN NOT NULL DEFAULT TRUE,
                create_date TIMESTAMP WITH TIME ZONE DEFAULT current_timestamp() NOT NULL,
                last_update TIMESTAMP WITH TIME ZONE DEFAULT current_timestamp() ON UPDATE current_timestamp() NOT NULL,
                CONSTRAINT PK_CUSTOMER PRIMARY KEY (customer_id),
                CONSTRAINT FK_CUSTOMER_ADDRESS FOREIGN KEY (address_id)
                    REFERENCES ADDRESS (address_id) ON DELETE RESTRICT ON UPDATE CASCADE,
                CONSTRAINT FK_CUSTOMER_STORE FOREIGN KEY (store_id)
                    REFERENCES STORE (store_id) ON DELETE RESTRICT ON UPDATE CASCADE
            );
            COMMENT ON TABLE CUSTOMER IS 'Customer details table';
            CREATE INDEX idx_last_name ON CUSTOMER (last_name);
        </sql>
        <rollback>
            <sql>
                DROP TABLE CUSTOMER;
            </sql>
        </rollback>
    </changeSet>
    <changeSet id="17" author="Juan Haugaard">
        <comment>Create table Film</comment>
        <sql>
            CREATE TABLE FILM (
                film_id BIGINT GENERATED ALWAYS AS IDENTITY(INCREMENT BY 1 NO MAXVALUE NO MINVALUE CACHE 1) NOT NULL,
                title VARCHAR(255) NOT NULL,
                description TEXT DEFAULT NULL,
                release_year YEARVALUE DEFAULT NULL,
                language_id BIGINT NOT NULL,
                original_language_id BIGINT DEFAULT NULL,
                rental_duration TINYINT NOT NULL DEFAULT 3,
                rental_rate DECIMAL(4,2) NOT NULL DEFAULT 4.99,
                length SMALLINT DEFAULT NULL,
                replacement_cost DECIMAL(5,2) NOT NULL DEFAULT 19.99,
                barcode CHAR(20),
                reverse_barcode CHAR(20) GENERATED ALWAYS AS (REVERSE(barcode)),
                rating MPAA_RATING DEFAULT 'G',
                special_features SPECIAL_FEATURES DEFAULT NULL,
                last_update TIMESTAMP WITH TIME ZONE DEFAULT current_timestamp() ON UPDATE current_timestamp() NOT NULL,
                CONSTRAINT PK_FILM PRIMARY KEY (film_id),
                CONSTRAINT fk_film_language FOREIGN KEY (language_id)
                    REFERENCES LANGUAGE (language_id) ON DELETE RESTRICT ON UPDATE CASCADE,
                CONSTRAINT fk_film_language_original FOREIGN KEY (original_language_id)
                    REFERENCES LANGUAGE (language_id) ON DELETE RESTRICT ON UPDATE CASCADE
            );
            COMMENT ON TABLE FILM IS 'Film details table';
            CREATE INDEX idx_title ON FILM(title);
            CREATE INDEX idx_barcode ON FILM(barcode);
            CREATE INDEX idx_reverse_barcode ON FILM(reverse_barcode);
<!--            ALTER TABLE FILM ALTER COLUMN barcode CHAR(20) GENERATED ALWAYS AS (LPAD(barcode ,12,'0'));-->
        </sql>
        <rollback>
            <sql>
                DROP TABLE FILM;
            </sql>
        </rollback>
    </changeSet>
    <changeSet id="18" author="Juan Haugaard">
        <comment>Add insert trigger to table Film</comment>
        <sql>
            CREATE TRIGGER InsertFilmTrigger AFTER INSERT ON
                FILM FOR EACH ROW CALL 'com.tayrona.sakila.procedures.InsertFilmTrigger';
        </sql>
        <rollback>
            <sql>
                DROP TRIGGER InsertFilmTrigger;
            </sql>
        </rollback>
    </changeSet>
    <changeSet id="19" author="Juan Haugaard">
        <comment>Add update trigger to table Film</comment>
        <sql>
            CREATE TRIGGER UpdateFilmTrigger AFTER UPDATE ON
                FILM FOR EACH ROW CALL 'com.tayrona.sakila.procedures.UpdateFilmTrigger';
        </sql>
        <rollback>
            <sql>
                DROP TRIGGER UpdateFilmTrigger;
            </sql>
        </rollback>
    </changeSet>
    <changeSet id="20" author="Juan Haugaard">
        <comment>Add delete trigger to table Film</comment>
        <sql>
            CREATE TRIGGER DeleteFilmTrigger AFTER DELETE ON
                FILM FOR EACH ROW CALL 'com.tayrona.sakila.procedures.DeleteFilmTrigger';
        </sql>
        <rollback>
            <sql>
                DROP TRIGGER DeleteFilmTrigger;
            </sql>
        </rollback>
    </changeSet>
    <changeSet id="21" author="Juan Haugaard">
        <comment>Create table film_text</comment>
        <sql>
            CREATE TABLE FILM_TEXT (
                film_id BIGINT NOT NULL,
                title VARCHAR(255) NOT NULL,
                description TEXT,
                CONSTRAINT PK_FILM_TEXT PRIMARY KEY (film_id)
            );
            COMMENT ON TABLE FILM_TEXT IS 'Film title and description table for fulltext search';
            CREATE INDEX idx_title_description ON FILM_TEXT(title, description);
        </sql>
        <rollback>
            <sql>
                DROP TABLE FILM_TEXT;
            </sql>
        </rollback>
    </changeSet>
    <changeSet id="22" author="Juan Haugaard">
        <comment>Create table inventory</comment>
        <sql>
            CREATE TABLE INVENTORY (
                inventory_id BIGINT GENERATED ALWAYS AS IDENTITY(INCREMENT BY 1 NO MAXVALUE NO MINVALUE CACHE 1) NOT NULL,
                film_id BIGINT NOT NULL,
                store_id BIGINT NOT NULL,
                last_update TIMESTAMP WITH TIME ZONE DEFAULT current_timestamp() ON UPDATE current_timestamp() NOT NULL,
                CONSTRAINT PK_INVENTORY PRIMARY KEY (inventory_id),
                CONSTRAINT fk_inventory_store FOREIGN KEY (store_id)
                    REFERENCES STORE (store_id) ON DELETE RESTRICT ON UPDATE CASCADE,
                CONSTRAINT fk_inventory_film FOREIGN KEY (film_id)
                    REFERENCES FILM (film_id) ON DELETE RESTRICT ON UPDATE CASCADE
            );
            COMMENT ON TABLE INVENTORY IS 'Inventory details table';
            CREATE INDEX idx_store_id_film_id ON INVENTORY (store_id, film_id);
        </sql>
        <rollback>
            <sql>
                DROP TABLE INVENTORY;
            </sql>
        </rollback>
    </changeSet>
    <changeSet id="23" author="Juan Haugaard">
        <comment>Create table Rental</comment>
        <sql>
            CREATE TABLE RENTAL (
                rental_id BIGINT GENERATED ALWAYS AS IDENTITY(INCREMENT BY 1 NO MAXVALUE NO MINVALUE CACHE 1) NOT NULL,
                rental_date DATETIME NOT NULL,
                inventory_id BIGINT NOT NULL,
                customer_id BIGINT NOT NULL,
                return_date DATETIME DEFAULT NULL,
                staff_id BIGINT NOT NULL,
                last_update TIMESTAMP WITH TIME ZONE DEFAULT current_timestamp() ON UPDATE current_timestamp() NOT NULL,
                CONSTRAINT PK_RENTAL PRIMARY KEY (rental_id),
                CONSTRAINT fk_rental_staff FOREIGN KEY (staff_id)
                    REFERENCES STAFF (staff_id) ON DELETE RESTRICT ON UPDATE CASCADE,
                CONSTRAINT fk_rental_inventory FOREIGN KEY (inventory_id)
                    REFERENCES INVENTORY (inventory_id) ON DELETE RESTRICT ON UPDATE CASCADE,
                CONSTRAINT fk_rental_customer FOREIGN KEY (customer_id)
                    REFERENCES CUSTOMER (customer_id) ON DELETE RESTRICT ON UPDATE CASCADE
            );
            COMMENT ON TABLE RENTAL IS 'Rental details table';
            CREATE UNIQUE INDEX idx_rental_date_inventory_id_customer_id
                ON RENTAL (rental_date, inventory_id, customer_id);
        </sql>
        <rollback>
            <sql>
                DROP TABLE RENTAL;
            </sql>
        </rollback>
    </changeSet>
    <changeSet id="24" author="Juan Haugaard">
        <comment>Create table Payment</comment>
        <sql>
            CREATE TABLE PAYMENT (
                payment_id BIGINT GENERATED ALWAYS AS IDENTITY(INCREMENT BY 1 NO MAXVALUE NO MINVALUE CACHE 1) NOT NULL,
                customer_id BIGINT NOT NULL,
                staff_id BIGINT NOT NULL,
                rental_id BIGINT DEFAULT NULL,
                amount DECIMAL(5,2) NOT NULL,
                payment_date DATETIME NOT NULL,
                last_update TIMESTAMP WITH TIME ZONE DEFAULT current_timestamp() ON UPDATE current_timestamp() NOT NULL,
                CONSTRAINT PK_PAYMENT PRIMARY KEY (payment_id),
                CONSTRAINT fk_payment_rental FOREIGN KEY (rental_id)
                    REFERENCES RENTAL (rental_id) ON DELETE SET NULL ON UPDATE CASCADE,
                CONSTRAINT fk_payment_customer FOREIGN KEY (customer_id)
                    REFERENCES CUSTOMER (customer_id) ON DELETE RESTRICT ON UPDATE CASCADE,
                CONSTRAINT fk_payment_staff FOREIGN KEY (staff_id)
                    REFERENCES STAFF (staff_id) ON DELETE RESTRICT ON UPDATE CASCADE
            );
            COMMENT ON TABLE PAYMENT IS 'Payment details table';
        </sql>
        <rollback>
            <sql>
                DROP TABLE PAYMENT;
            </sql>
        </rollback>
    </changeSet>
    <changeSet id="25" author="Juan Haugaard">
        <comment>Create table Film Actor cross-reference</comment>
        <sql>
            CREATE TABLE FILM_ACTOR (
                actor_id BIGINT NOT NULL,
                film_id BIGINT NOT NULL,
                last_update TIMESTAMP WITH TIME ZONE DEFAULT current_timestamp() ON UPDATE current_timestamp() NOT NULL,
                CONSTRAINT PK_FILM_ACTOR PRIMARY KEY (actor_id, film_id),
                CONSTRAINT fk_film_actor_actor FOREIGN KEY (actor_id)
                    REFERENCES ACTOR (actor_id) ON DELETE RESTRICT ON UPDATE CASCADE,
                CONSTRAINT fk_film_actor_film FOREIGN KEY (film_id)
                    REFERENCES FILM (film_id) ON DELETE RESTRICT ON UPDATE CASCADE
            );
            COMMENT ON TABLE FILM_ACTOR IS 'Film Actor cross-reference table';
        </sql>
        <rollback>
            <sql>
                DROP TABLE FILM_ACTOR;
            </sql>
        </rollback>
    </changeSet>
    <changeSet id="26" author="Juan Haugaard">
        <comment>Create table Film Category cross-reference</comment>
        <sql>
            CREATE TABLE FILM_CATEGORY (
                film_id BIGINT NOT NULL,
                category_id BIGINT NOT NULL,
                last_update TIMESTAMP WITH TIME ZONE DEFAULT current_timestamp() ON UPDATE current_timestamp() NOT NULL,
                CONSTRAINT PK_FILM_CATEGORY PRIMARY KEY (film_id, category_id),
                CONSTRAINT fk_film_category_film FOREIGN KEY (film_id)
                    REFERENCES FILM (film_id) ON DELETE RESTRICT ON UPDATE CASCADE,
                CONSTRAINT fk_film_category_category FOREIGN KEY (category_id)
                    REFERENCES CATEGORY (category_id) ON DELETE RESTRICT ON UPDATE CASCADE
            );
            COMMENT ON TABLE FILM_CATEGORY IS 'Film Category cross-reference table';
        </sql>
        <rollback>
            <sql>
                DROP TABLE FILM_CATEGORY;
            </sql>
        </rollback>
    </changeSet>
    <changeSet id="27" author="Juan Haugaard">
        <comment>Define function enum_to_ordinal</comment>
        <sql>
            CREATE ALIAS ENUM_TO_ORDINAL DETERMINISTIC FOR 'com.tayrona.sakila.procedures.EnumUtils.valueToOrdinal';
        </sql>
        <rollback>
            <sql>
                DROP ALIAS ENUM_TO_ORDINAL;
            </sql>
        </rollback>
    </changeSet>
    <changeSet id="28" author="Juan Haugaard">
        <comment>Define function mpaa_rating_to_ordinal</comment>
        <sql>
            CREATE ALIAS MPAA_RATING_TO_ORDINAL DETERMINISTIC FOR 'com.tayrona.sakila.procedures.EnumUtils.mpaaRatingToOrdinal';
        </sql>
        <rollback>
            <sql>
                DROP ALIAS MPAA_RATING_TO_ORDINAL;
            </sql>
        </rollback>
    </changeSet>
    <changeSet id="29" author="Juan Haugaard">
        <comment>Define function special_features_to_ordinal</comment>
        <sql>
            CREATE ALIAS SPECIAL_FEATURES_TO_ORDINAL DETERMINISTIC FOR 'com.tayrona.sakila.procedures.EnumUtils.specialFeaturesToOrdinal';
        </sql>
        <rollback>
            <sql>
                DROP ALIAS SPECIAL_FEATURES_TO_ORDINAL;
            </sql>
        </rollback>
    </changeSet>
    <changeSet id="30" author="Juan Haugaard">
        <comment>Create table TEST_TABLE</comment>
        <sql>
            create table TEST_TABLE (
                id BIGINT GENERATED ALWAYS AS IDENTITY(INCREMENT BY 1 NO MAXVALUE NO MINVALUE CACHE 1) NOT NULL,
                features SPECIAL_FEATURES default NULL,
                CONSTRAINT PK_TESTTABLE PRIMARY KEY (id)
            );
            COMMENT ON TABLE TEST_TABLE IS 'test table';
        </sql>
        <rollback>
            <sql>
                DROP TABLE TEST_TABLE;
            </sql>
        </rollback>
    </changeSet>
    <changeSet id="31" author="Juan Haugaard">
        <comment>Add trigger to table TEST_TABLE</comment>
        <sql>
            CREATE TRIGGER TestTrigger AFTER INSERT,UPDATE,DELETE ON
                TEST_TABLE FOR EACH ROW CALL 'com.tayrona.sakila.procedures.TestTrigger';
        </sql>
        <rollback>
            <sql>
                DROP TRIGGER TestTrigger;
            </sql>
        </rollback>
    </changeSet>
    <changeSet id="32" author="Juan Haugaard">
        <comment>TEST_TABLE initial data</comment>
        <sql>
            INSERT INTO TEST_TABLE (FEATURES) VALUES(ARRAY['Commentaries', 'Deleted Scenes']);
            INSERT INTO TEST_TABLE (FEATURES) VALUES(ARRAY['Commentaries', 'Trailers']);
            INSERT INTO TEST_TABLE (FEATURES) VALUES(ARRAY['Commentaries']);
            INSERT INTO TEST_TABLE (FEATURES) VALUES(ARRAY['Trailers']);
            INSERT INTO TEST_TABLE (FEATURES) VALUES(ARRAY['Deleted Scenes']);
            INSERT INTO TEST_TABLE (FEATURES) VALUES(ARRAY['Behind the Scenes']);
            UPDATE TEST_TABLE SET FEATURES = ARRAY_APPEND(FEATURES, 'Deleted Scenes') WHERE ID=2;
            UPDATE TEST_TABLE SET FEATURES = ARRAY_APPEND(FEATURES, 'Behind the Scenes') WHERE ID=2;
        </sql>
        <rollback>
            <sql>
                TRUNCATE TABLE TEST_TABLE;
            </sql>
        </rollback>
    </changeSet>

</databaseChangeLog>